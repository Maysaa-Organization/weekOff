//=============================================== 1//Depending on data modeling concept that you have learned:// create a factory function called makeComputer that represents computers,// what different attributes computers may have? create two computers object //from your factory function and save them in one array called computers!// Note: please write one or two lines here describing your solution.// make function return object function makeComputer(memory,cpu,ssd ,os ) {    // TODO: Your code here    // the factory function is function must return object , here I pass the parameter to key to change the value     // at every invoke to this function and make new object.    return{      memorySize : memory,      cpu         :cpu,      ssd         :ssd,      os          :os     }}var windows = makeComputer(8 , 120 , true , "windows")var mac     = makeComputer(16 , 130 , true , "ios")// write function displayComputer that can be used to display one computer.function displayComputer(computer) {    // TODO: Your code here    return "The memory size = "computer.memorySize + " , The cpu = " + computer.cpu + " , computer have ssd : " + computer.ssd + " The operating system is  "+ computer.os;}//=============================================== 2//Lets make an employee profile using closures  function employee (name,salary){    var name = name;    var salary = salary;    var friend = [];    return {      sayMyName : function(){        return name;      },      sayHello:  function(){          return "hello " + name;           },      increaseSalary: function(n){          salary = salary + n;          return "your salary is "+salary+"$";      },      addFriend : function(friendName,salary){      		// add object to the array        friend.push({name:friendName , salary:salary});        console.log(friend[0]);          // if(friend.length === 1){          //    return "you just became friend with " + friend[0].name ;          // }else if(friend.length > 1){          //   for(var i = 0 ; i < friend.length;i++){          //         return "you just became friend with "+friend[i].name+" and "+friend[i+1].name          //   }          // }               }    }      }  var employeeA = employee("jack", 100);  var employeeB = employee("Mark", 200);  var employeeC = employee("Sara", 150);  //create a function when invoked returns the name of that employee.  // employeeA.sayMyName(); // "jack"  // employeeB.sayMyName(); // "Mark"  //now modify that closure and add a function that says hello to the employee name;  // employeeA.sayHello(); // hello jack  // employeeB.sayHello(); // hello Mark  //modify your closure and add function   //increaseSalary that increases the salary for   //the employee by n value and return it.  //employeeA.increaseSalary(50); // "your salary is 150$"  //how about we let jack and mark meet togther!  //modify your closure and add function   //addFriend that accepts an object as a parameter,   //and let jack meets his friends.  // employeeA.addFriend(employeeB); // "you just became friend with Mark"  // employeeA.addFriend(employeeC); // "you just became friend with Mark and Sara"  //modify your closure to tell mark how many friends does he have.  // employeeA.listFriends(); // "you have 2 friends"//=============================================== 3//Lets create a pet class using OOP concept,  // a - we need to create the pets (lets create only one for now),   //the invocation should take the name of the pet.   // var pet1 = Pet("doggy");  // b - we need function to add the other info for the pet,   //called addInfo function. Make sure your functions unneeded memory space  // pet1.addInfo(age, owner, gender, species);  // c- create another function to increase the pet age by n value.  // d - create a variable called availability with the   //default state as false, then create another function to check the pet state,  // returns true if the pet is available and false if it's not  // f- in order to change the state of the pet,   //create a function called changeState,   //when called it will make the pet avaliablity true,  //    and when called again it will make it false.  // Write your code here .....function pet(name){    var petObject={};     petObject.name=name;    petObject.addInfo = addInfo;    petObject.age ;    petObject.owner;    petObject.gender;    petObject.species;    petObject.increaseAge=increaseAge;    petObject.availability=false;    petObject.checkState =checkState;    petObject.changeState = changeState;    return petObject;}var addInfo = function(age, owner, gender, species){                 this.age = age;        this.owner = owner;        this.gender = gender;        this.species = species}var increaseAge = function(n){  this.age =this.age - n; }var checkState = function(){  if(this.availability === true){    return true;   }else{    return false;  }}var changeState=function(){    if(this.availability === false){      return this.availability = true;          }else if(this.availability === true){      return this.availability = false;          }}  // Now, to make sure that you are actually reading, make a comment below this and type: Yes I am//=============================================== 4//Short Answer Theoretical Questions://In your own words, no more than 3 sentences, answer the following: // Q1: What is factory function? function return object// Q2: What is data modeling? way to represent data// Q3: What is OOP?process by wich we arrived to simulated object and behaviour// Q4: What is the meaning of the keyword this and how can the keyword be used? the name of the keyword is describe the reason to use this keyword   //Good Luck :))